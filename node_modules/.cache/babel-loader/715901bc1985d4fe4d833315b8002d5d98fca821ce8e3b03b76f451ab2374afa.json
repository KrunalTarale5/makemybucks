{"ast":null,"code":"/** @format */\nimport { toDataURL } from 'qrcode';\n/**\n * Generate QR code and add in your banner\n * @param props GenerateQrOnBannerProps\n * @returns Promise<GenerateQrResponse>\n */\nexport const generateQrOnBanner = props => {\n  return new Promise((resolve, reject) => {\n    toDataURL(props.stringToCreateQR, {\n      type: 'image/png',\n      color: {\n        light: '#00000000',\n        dark: '#000000'\n      }\n    }, function (err, url) {\n      if (err) {\n        reject(err);\n      }\n      if (url) {\n        const canvas = document.createElement('canvas');\n        canvas.width = 300;\n        canvas.height = 450;\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.src = props.bannerImg;\n        img.setAttribute('crossOrigin', 'anonymous');\n        img.onload = () => {\n          ctx.drawImage(img, 0, 0, 300, 450);\n          const img_ = new Image();\n          img_.src = url;\n          img_.setAttribute('crossOrigin', 'anonymous');\n          img_.onload = () => {\n            ctx.drawImage(img_, 70, 125, 150, 150);\n            ctx.font = '10px sans-serif';\n            ctx.fillStyle = '#8A92A6';\n            ctx.translate(80, 260); // Move the origin to the desired position\n            ctx.rotate(-Math.PI / 2); // Rotate the canvas 90 degrees counter-clockwise\n            ctx.fillText(props.bannerText, 0, 0);\n            canvas.toBlob(blob => {\n              resolve({\n                qrString: props.stringToCreateQR,\n                blob,\n                bannerText: props.bannerText\n              });\n            });\n          };\n        };\n      }\n    });\n  });\n};\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}