{"ast":null,"code":"export function validateForm(formData, validateField) {\n  const result = {\n    hasError: false,\n    errors: {}\n  };\n  for (const key in formData) {\n    const message = validateField(key, formData);\n    result.hasError = result.hasError ? result.hasError : message !== '' ? true : false;\n    result.errors = {\n      ...result.errors,\n      [key]: message\n    };\n  }\n  return result;\n}\nexport const sanitizeErrors = err => {\n  const sanitizeErrs = {};\n  for (const i in err) {\n    if (Array.isArray(err[i])) {\n      const v = err[i];\n      sanitizeErrs[i] = v.join(' ').toString();\n    } else if (Object.keys(err[i]).length > 0) {\n      const error = err[i];\n      for (const e in error) {\n        const v = error[e];\n        sanitizeErrs[i] = v.join(' ').toString();\n      }\n    } else {\n      sanitizeErrs[i] = err[i].toString();\n    }\n  }\n  return sanitizeErrs;\n};","map":{"version":3,"names":["validateForm","formData","validateField","result","hasError","errors","key","message","sanitizeErrors","err","sanitizeErrs","i","Array","isArray","v","join","toString","Object","keys","length","error","e"],"sources":["D:/Krunal/makemybucks/src/@utils/validateUtils.ts"],"sourcesContent":["import { ErrorValues, FormError, FormErrorMessage, SanitizeErrors } from '@interfaces/common';\r\n\r\nexport function validateForm<T>(\r\n\tformData: T,\r\n\tvalidateField: (fieldName: keyof T, formData: T) => string\r\n) {\r\n\tconst result: FormError<T> = {\r\n\t\thasError: false,\r\n\t\terrors: {} as FormErrorMessage<T>,\r\n\t};\r\n\tfor (const key in formData) {\r\n\t\tconst message = validateField(key, formData);\r\n\t\tresult.hasError = result.hasError ? result.hasError : message !== '' ? true : false;\r\n\t\tresult.errors = {\r\n\t\t\t...result.errors,\r\n\t\t\t[key]: message,\r\n\t\t};\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const sanitizeErrors = (err: ErrorValues): SanitizeErrors => {\r\n\tconst sanitizeErrs: SanitizeErrors = {};\r\n\r\n\tfor (const i in err) {\r\n\t\tif (Array.isArray(err[i])) {\r\n\t\t\tconst v: string[] = err[i] as string[];\r\n\t\t\tsanitizeErrs[i] = v.join(' ').toString();\r\n\t\t} else if (Object.keys(err[i]).length > 0) {\r\n\t\t\tconst error: any = err[i];\r\n\t\t\tfor (const e in error) {\r\n\t\t\t\tconst v = error[e];\r\n\t\t\t\tsanitizeErrs[i] = v.join(' ').toString();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsanitizeErrs[i] = err[i].toString();\r\n\t\t}\r\n\t}\r\n\treturn sanitizeErrs;\r\n};\r\n"],"mappings":"AAEA,OAAO,SAASA,YAAYA,CAC3BC,QAAW,EACXC,aAA0D,EACzD;EACD,MAAMC,MAAoB,GAAG;IAC5BC,QAAQ,EAAE,KAAK;IACfC,MAAM,EAAE,CAAC;EACV,CAAC;EACD,KAAK,MAAMC,GAAG,IAAIL,QAAQ,EAAE;IAC3B,MAAMM,OAAO,GAAGL,aAAa,CAACI,GAAG,EAAEL,QAAQ,CAAC;IAC5CE,MAAM,CAACC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,GAAGG,OAAO,KAAK,EAAE,GAAG,IAAI,GAAG,KAAK;IACnFJ,MAAM,CAACE,MAAM,GAAG;MACf,GAAGF,MAAM,CAACE,MAAM;MAChB,CAACC,GAAG,GAAGC;IACR,CAAC;EACF;EACA,OAAOJ,MAAM;AACd;AAEA,OAAO,MAAMK,cAAc,GAAIC,GAAgB,IAAqB;EACnE,MAAMC,YAA4B,GAAG,CAAC,CAAC;EAEvC,KAAK,MAAMC,CAAC,IAAIF,GAAG,EAAE;IACpB,IAAIG,KAAK,CAACC,OAAO,CAACJ,GAAG,CAACE,CAAC,CAAC,CAAC,EAAE;MAC1B,MAAMG,CAAW,GAAGL,GAAG,CAACE,CAAC,CAAa;MACtCD,YAAY,CAACC,CAAC,CAAC,GAAGG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC;IACzC,CAAC,MAAM,IAAIC,MAAM,CAACC,IAAI,CAACT,GAAG,CAACE,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC1C,MAAMC,KAAU,GAAGX,GAAG,CAACE,CAAC,CAAC;MACzB,KAAK,MAAMU,CAAC,IAAID,KAAK,EAAE;QACtB,MAAMN,CAAC,GAAGM,KAAK,CAACC,CAAC,CAAC;QAClBX,YAAY,CAACC,CAAC,CAAC,GAAGG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzC;IACD,CAAC,MAAM;MACNN,YAAY,CAACC,CAAC,CAAC,GAAGF,GAAG,CAACE,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;IACpC;EACD;EACA,OAAON,YAAY;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}