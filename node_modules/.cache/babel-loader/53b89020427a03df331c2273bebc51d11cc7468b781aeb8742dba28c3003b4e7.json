{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { resolveComponentProps } from '@mui/base/utils';\nimport { refType } from '@mui/utils';\nimport { singleItemValueManager } from '../internals/utils/valueManagers';\nimport { TimeField } from '../TimeField';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport { useLocaleText, useUtils } from '../internals/hooks/useUtils';\nimport { validateTime } from '../internals/utils/validation/validateTime';\nimport { useMobilePicker } from '../internals/hooks/useMobilePicker';\nimport { extractValidationProps } from '../internals/utils/validation/extractValidationProps';\nimport { renderTimeViewClock } from '../timeViewRenderers';\nimport { resolveTimeFormat } from '../internals/utils/time-utils';\n/**\r\n * Demos:\r\n *\r\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\r\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\r\n *\r\n * API:\r\n *\r\n * - [MobileTimePicker API](https://mui.com/x/api/date-pickers/mobile-time-picker/)\r\n */\nconst MobileTimePicker = /*#__PURE__*/React.forwardRef(function MobileTimePicker(inProps, ref) {\n  var _defaultizedProps$amp, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;\n  const localeText = useLocaleText();\n  const utils = useUtils();\n\n  // Props with the default values common to all time pickers\n  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiMobileTimePicker');\n  const viewRenderers = _extends({\n    hours: renderTimeViewClock,\n    minutes: renderTimeViewClock,\n    seconds: renderTimeViewClock\n  }, defaultizedProps.viewRenderers);\n  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;\n\n  // Props with the default values specific to the mobile variant\n  const props = _extends({}, defaultizedProps, {\n    ampmInClock,\n    viewRenderers,\n    format: resolveTimeFormat(utils, defaultizedProps),\n    slots: _extends({\n      field: TimeField\n    }, defaultizedProps.slots),\n    slotProps: _extends({}, defaultizedProps.slotProps, {\n      field: ownerState => {\n        var _defaultizedProps$slo;\n        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {\n          ref\n        });\n      },\n      toolbar: _extends({\n        hidden: false,\n        ampmInClock\n      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)\n    })\n  });\n  const {\n    renderPicker\n  } = useMobilePicker({\n    props,\n    valueManager: singleItemValueManager,\n    valueType: 'time',\n    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,\n    validator: validateTime\n  });\n  return renderPicker();\n});\nMobileTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\r\n   * 12h/24h view for hour selection clock.\r\n   * @default `utils.is12HourCycleInCurrentLocale()`\r\n   */\n  ampm: PropTypes.bool,\n  /**\r\n   * Display ampm controls under the clock (instead of in the toolbar).\r\n   * @default true on desktop, false on mobile\r\n   */\n  ampmInClock: PropTypes.bool,\n  /**\r\n   * If `true`, the main element is focused during the first mount.\r\n   * This main element is:\r\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\r\n   * - the `input` element if there is a field rendered.\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * Class name applied to the root element.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * If `true`, the popover or modal will close after submitting the full date.\r\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\r\n   * Overridable components.\r\n   * @default {}\r\n   * @deprecated Please use `slots`.\r\n   */\n  components: PropTypes.object,\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   * @deprecated Please use `slotProps`.\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * The default value.\r\n   * Used when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n  /**\r\n   * Do not ignore date part when validating min/max time.\r\n   * @default false\r\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\r\n   * If `true`, the open picker button will not be rendered (renders only the field).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\r\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n  /**\r\n   * Format of the date when rendered in the input(s).\r\n   * Defaults to localized format based on the used `views`.\r\n   */\n  format: PropTypes.string,\n  /**\r\n   * Density of the format when rendered in the input.\r\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\r\n   * @default \"dense\"\r\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: refType,\n  /**\r\n   * The label content.\r\n   */\n  label: PropTypes.node,\n  /**\r\n   * Locale for components texts.\r\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\r\n   */\n  localeText: PropTypes.object,\n  /**\r\n   * Maximal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\n  maxTime: PropTypes.any,\n  /**\r\n   * Minimal selectable time.\r\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\r\n   */\n  minTime: PropTypes.any,\n  /**\r\n   * Step over minutes.\r\n   * @default 1\r\n   */\n  minutesStep: PropTypes.number,\n  /**\r\n   * Callback fired when the value is accepted.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The value that was just accepted.\r\n   */\n  onAccept: PropTypes.func,\n  /**\r\n   * Callback fired when the value changes.\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TValue} value The new value.\r\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see `open`).\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback fired when the error associated to the current value changes.\r\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\r\n   *\r\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\r\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\r\n   * @param {TError} error The new error describing why the current value is not valid.\r\n   * @param {TValue} value The value associated to the error.\r\n   */\n  onError: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see `open`).\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * Callback fired when the selected sections change.\r\n   * @param {FieldSelectedSections} newValue The new selected sections.\r\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\r\n   * Callback fired on view change.\r\n   * @template TView\r\n   * @param {TView} view The new view.\r\n   */\n  onViewChange: PropTypes.func,\n  /**\r\n   * Control the popup or dialog open state.\r\n   * @default false\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * The default visible view.\r\n   * Used when the component view is not controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  readOnly: PropTypes.bool,\n  /**\r\n   * If `true`, disable heavy animations.\r\n   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\r\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\r\n   * The date used to generate the new value when both `value` and `defaultValue` are empty.\r\n   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\r\n   */\n  referenceDate: PropTypes.any,\n  /**\r\n   * The currently selected sections.\r\n   * This prop accept four formats:\r\n   * 1. If a number is provided, the section at this index will be selected.\r\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\r\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\r\n   * 4. If `null` is provided, no section will be selected\r\n   * If not provided, the selected sections will be handled internally.\r\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\r\n   * Disable specific clock time.\r\n   * @param {number} clockValue The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   * @deprecated Consider using `shouldDisableTime`.\r\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\r\n   * Disable specific time.\r\n   * @template TDate\r\n   * @param {TDate} value The value to check.\r\n   * @param {TimeView} view The clock type of the timeValue.\r\n   * @returns {boolean} If `true` the time will be disabled.\r\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.object,\n  /**\r\n   * Overridable component slots.\r\n   * @default {}\r\n   */\n  slots: PropTypes.object,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * Choose which timezone to use for the value.\r\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\r\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\r\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\r\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\r\n   */\n  timezone: PropTypes.string,\n  /**\r\n   * The selected value.\r\n   * Used when the component is controlled.\r\n   */\n  value: PropTypes.any,\n  /**\r\n   * The visible view.\r\n   * Used when the component view is controlled.\r\n   * Must be a valid option from `views` list.\r\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\r\n   * Define custom view renderers for each section.\r\n   * If `null`, the section will only have field editing.\r\n   * If `undefined`, internally defined view will be the used.\r\n   */\n  viewRenderers: PropTypes.shape({\n    hours: PropTypes.func,\n    minutes: PropTypes.func,\n    seconds: PropTypes.func\n  }),\n  /**\r\n   * Available views.\r\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n};\nexport { MobileTimePicker };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}